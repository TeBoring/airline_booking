links = LOAD '$inputdata' as (id1:int, id2:int);links = FOREACH links GENERATE FLATTEN(bidirectional(id1, id2));vec_comp1 = LOAD '$vec_comp' as (id:int, component:int);vec_comp2 = LOAD '$vec_comp' as (id:int, component:int);comp_to_merge_tmp = Join links by id1, vec_comp1 by id;comp_to_merge_tmp = Join comp_to_merge_tmp by links::rels::id2, vec_comp2 by id;comp_to_merge = FOREACH comp_to_merge_tmp GENERATE vec_comp1::component as comp1, vec_comp2::component as comp2;comp_to_merge = FILTER comp_to_merge by comp1 != comp2;comp_to_merge_inverse = FOREACH comp_to_merge GENERATE comp2 as comp1, comp1 as comp2;comp_to_merge = UNION comp_to_merge, comp_to_merge_inverse;comp_to_merge = DISTINCT comp_to_merge;comp_to_merge_group = GROUP comp_to_merge by comp1;comp_to_merge_min = FOREACH comp_to_merge_group GENERATE group as source, MIN(comp_to_merge.comp2) as target;vec_comp_tmp = JOIN vec_comp1 by component, comp_to_merge_min by source;vec_comp = FOREACH vec_comp_tmp GENERATE vec_comp1::id as id, least(comp_to_merge_min::target, vec_comp1::component) as component, vec_comp1::component as prev_component;vec_comp_final = FOREACH vec_comp GENERATE id, component;component_diff = FOREACH vec_comp GENERATE ABS ( prev_component - component );max_diff = FOREACH ( GROUP component_diff ALL ) GENERATE MAX ( component_diff );STORE vec_comp_final INTO '$new_vec_comp';STORE max_diff INTO '$max_diff';
